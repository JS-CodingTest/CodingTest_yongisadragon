// 문제 설명
// 머쓱이네 피자가게는 피자를 일곱 조각으로 잘라 줍니다. 피자를 나눠먹을 사람의 수 n이 주어질 때, 모든 사람이 피자를 한 조각 이상 먹기 위해 필요한 피자의 수를 return 하는 solution 함수를 완성해보세요.

// 제한사항
// 1 ≤ n ≤ 100

function solution(n) {
  let sum = 0;
  return n % 7 === 0 ? (sum += n / 7) : (sum += parseInt(n / 7) + 1);
}

// 위 식은 아래처럼 있겠지. 저번에 배운 내용이지만, 나머지 연산자에 동등 연산자를 안쓰면, n%7은 n%7 !==0과 똑같이 쓰인다. 똑같다는 뜻이 아니라. 이 삼항 연산자에서 그렇게 쓰인다는 뜻이다. n%7이 참이 되려면 n%7이 0이 아니어야 하기 때문에, !==0 이 생략되어 있다고 볼 수 있는 것이다. 즉 아래식은, n%7이 참이라면(값이 0이 아니라면(!==0), 7의 배수가 아니라면) sum+=parseInt(n/7)+1을 출력, 참이 아니라면(값이 0이라면(===0), 7의 배수라면) sum+=n/7을 출력.
function solution(n) {
  let sum = 0;
  return n % 7 ? (sum += parseInt(n / 7) + 1) : (sum += n / 7); // 'n%7' 은 'n%7 !==0' 으로 쓰이고 있음
}

// 솔직히 많이 헤맸다. 7명까지 1판으로 먹을 수 있다는 생각을 했고, 그말은 즉 7의 배수로 떨어지는 인원(n/7)이라면, sum에 그 값만큼 더해주면 된다는 생각은 했다. 7명->+1판, 14명->+2판. 그리고 그 배수에서 1이 늘어날때마다 1판이 늘어난다는 것까지도 생각했다. 삼항연산자라는 힌트를 우연히 얻어서 풀긴했다.

// 다른 풀이1>
// 다른 풀이라기 보단 의식의 흐름을 풀어 쓴다면 이렇겠다. 만약 7의 배수라면 n/7(1,2,3,4... 정수로만 나올 것임)을, 7의 배수가 아니라면, 이를테면 n이 6이라면 parseInt(0.xxx) -> 0이므로 0+1이 되어 1을 반환. 1판일 것이다. 만약 n이 8이라면 parseInt(1.xxx) -> 1이므로 1+1이 되어 2를 반환. 2판이 될 것이다.
// function solution(n){
//   if(n%7 ===0){
//     return n/7;
//   }else if(n%7 !== 0){
//     return parseInt(n/7)+1;
//   }
// }
